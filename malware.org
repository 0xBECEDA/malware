#+STARTUP: showall indent hidestars


Попытка написать собственный вирус.

~Устройство эльфа~
Сначала идет заголовок самого эльфа. Он фиксированного размера. На моей
архитектуре это 64 байта.
Из заголовка можно узнать:
- тип эльфа
- смещение от начала файла до таблицы заголовков программы (на самом деле
  это массив)
- количество этих заголовков
- смещение от начала файла до таблицы заголовков секций
- entry point программы
- прочая нужная информация, но сейчас без надобности

Затем идет выравнивание - но его может и не быть

Потом идет таблица заголовков программы. Эти заголовки описывают сегменты
исполняемого кода программы.
Заголовки представляют собой массив.
Об заголовках известно:
- все фиксированного размера - на 64-разрядной архитектуре каждый
  занимает 52 байта
- идут подряд друг за другом
- каждый заголовок описывает 1 сегмент кода
- содержит в себе: размер описываемого сегмента, его смещение от начала
  файла, его вирутальный и физический адреса и т.д.
- порядок заголовков не соответствует порядку сегментв кода: второй
  заголовок вполне может описывать последний сегмент кода и наоборот

После таблицы заголовков может быть выравнивание. А может и не быть.

Следом идут сами сегменты исполняемого кода - кода программы.
За ними идут секции раздела .data, т.е. сегменты кода данных.
На них указывает таблица заголовков секций.
Она - последнее что есть в файле и из каждого заголовка можно вытащить ту
де информацию о сегменте кода данных, что мы вытаскивали из заголовков
программы.

~Этапы работы по написанию вируса~:
- найти все исполняемые (ELF) файлы текущей директории
- найти место, в которое можно вписать код вируса
- установить точку исполнения для вируса
- вписать вирус в файл
- запустить

~Куда записать вирус~
Есть несколько вариантов.
1. Вписать в padding между заголовком эльфа и таблицей заголовков
   программы.
- плюсы: легко найти
- минусы: мало места, а может и вообще не быть
2. Вписать прямо в основную секцию кода, прямо начиная с entry point
- плюсы: не надо париться с передачей управления вирусу, возможно под
  него не надо будет писать отдельный заголовок, только подкорректировать
  уже сущетвующий
- минусы: легко попасть между инстуркциями, надо грамонтно вставить код,
  чтоб не поломать файл
3. Вписать в самый конец файла
- плюсы: конец файла относительно легко найти
- минусы: первый же антивирус спалит подозрительный эльф, у которого
  последняя секция кода исполняемая, а не таблица заголовком сегмантов
  данных или сами сегменты данных
4. Вписать между последним сегментом исполняемого кода и первым сегментом
   данных
- плюсы: выглядит менее подозрительно для антивируса
- минусы: нужно найти это место, создать новый сегмент кода, создать под
  него новый заголовок, включить его в таблицу заголовков программы,
  передать управление.
Выглядит как самый геморройный вариант, но тем не менее самый надежный:
эльф придется пересобирать, но зато можно выделить себе столько места,
сколько понадобится и не бояться, что файл от этого сломается

Так что остановимся на нем.

~Передача управления~
Самый простой способ передать управление вирусу - это начать исполнение с
него, а он уже будет передавать упарвление в основную программу.Т.е. в
основной секции кода первой инструкцией поставить ~call~ на код вируса,
так что когда вирус совершит ~ret~, мы автоматически вернемся к
исполнению программы-жертвы

~Как пересобрать эльф~
- выгружаем заголовок эльфа
- правим в нем поле ~e_phnum~ - оно отвечает за количество заголовков
  программ - раз мы добавляем минимум один сегмент кода, нам понадобится
  новый заголовок. Значит, кол-во заголовков увеличится
- создаем новый заголовок для нашего вируса - это будет структура типа
  ~Elf64_Phdr~, заполняем все ее поля. На самом деле нам не нужно
  создавать новый заголовок с нуля, эльф вируса уже содержит в себе все
  заголовки, надо просто вытащить их
  сложность состоит в том, что их надо будет поправить: изменить смещения
  от начала файла, виртуальные адреса и т.д.
- по очереди выгружаем все заголовки секций данных и правим их: если мы
  вставляем между сегментами данных и сегментами кода доп. сегмент,
  значит, сегменты данных отъедут дальше от начала файла. Нужно поправить
  смещения - пишем для нее специальную функцию, которая, зная, сколько
  байт занимает доп. сегмент, увеличит ровно на это значение смещения
  секций.
- выгружаем оставшиеся части кода эльфа
- теперь создаем новый эльф (на время отладки, в "продакшене" будем
  открывать на запись эльф-жертву, который мы и препарировали) и начинаем
  по очереди вписывть код: измененный заголовок, таблицу заголовков
  программы и т.д.

~Как найти, где кончаются сегменты кода и начинаются сегменты данных~
У нас есть вся необходимая информация из заголовков сегментов кода и
заголовка эльфа.

А именно:
- из поля заголовка эльфа ~e_phoff~ вытаскиваем смещение до таблицы
  заголовков сегментов кода (программы)
- читаем таблицу заголовков программы
- сверяем смещение каждого сегмента кода и его размер
- таким образом находим сегмент с самым большим смещением от начала файла
  и самым большим размером - иногда почему-то сегменты накладываются друг
  на друга, если верить инфе из их заголовков
- сегмент с самым большим смещением от начала файла - это и есть и
  последний сегмент кода
- проматываем колво байт, которое равно самое большое смещение сегмента +
  его размер и получаем байт, с которого начнем вписывать вирус

~Посчитать виртуальный адрес, куда вирус будет выгружаться в память~
(посмотреть, как это орагнизовано в других секциях кода, получить
представление о карте памяти)

Программа выделяет определенное количество виртуальной памяти под
программу. Адреса идут подряд, как правило.
Так что чтоб присвоить новые виртуальные адреса вирусу нужно:
- найти последний сегмент кода жертве, получить его виртуальный адрес
- вытащить все заголовки вируса кроме заголовка самого эльфа - заголовки
  программы отдельно, а заголовки секций - отдельно. Записывать будем в
  два массива
- отсортировать элементы массивов - структуры заголовков - по их смещению
  от начала файлов. Так будет проще и смещения изменять, и виртуальные
  адреса присваивать
- посчитать соотношения между адресами сегментов кода вируса - так мы
  получим представление, сколько они занимают места в виртуальной памяти
- пройтись по каждому из массивов и присвоить новые адреса. Отсчет пойдет
  от адреса последней секции кода жертвы

Похожим обраом посчитать физические адреса

~Как не заражать файлы повторно и не заразить исполняемый файл вируса~
Установить маркер заражения. Над установить так, чтоб было относительно
легко достать.

Немаловажно заметить, что эльф вируса - это полноценный эльф, который
имеет свой заголовок, таблицы заголовков и т.д. А нам от него нужны
только секции с исполняемым кодом.

Так что перед тем, как вписать свой код, вирус должен проанализировать
собственный эльф и получить из него секции кода.
