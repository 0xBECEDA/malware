#+STARTUP: showall indent hidestars

** Тут должен быть какой-то заголовок

Я тупо пялился в монитор и в упор не мог понять, что происходит.
У меня уже был написан весь вирус целиком - ничего особенного, просто
находит ELF-файлы в текущей папке и заражает их - он заразил файл жертвы,
отработал в нем без сбоев, передал управление на жертву и... вызов ~libc~
внутри жертвы заканчивался сегфолтом.

С маниакальной дотошностью я проверял содержимое секции ~dynamic~ - она
содержит в себе информацию для линкера, а так же корректного старта и
завершения сишной программы - содержимое разделов ~GOT~ и ~PLT~, а так же
заголовков секций, сегментов и самого эльфа, и не мог понять, почему
~libc~ не может провести старт моей жертвы.

Вернемся на пару недель назад.
Бегло пролистав книгу Криса Касперски "Записки исследователя компьютерных
вирусов", я загорелся идеей написать свой первый в жизни вирус: всего-то
надо вставить код вируса в файл, немножко подредактировать заголоки
сегментов и секций и изменить ~entry point~ - точку входа - и дело в
шляпе.

Если вдруг для кого-то ELF-файлы и загрузка программ - это немного черная
магия, то достаточно знать, что ELF-файл нужен, чтоб дать представление
загрузчику и линкеру, как следует расположить программу в памяти процесса
и слинковать ее с библиотеками, если у вас динамическая линковка.
Программа делится на сегменты - объемные куски кода, которые включают в
себя секции - это менее объемные куски кода. У каждого сегмента и укаждой
секции есть свой заголовок: в нем содержит информация, что это за
сегмент/секция, где искать в файле, размещать в памяти процесса и не
размещать вообще, сколько места занимает и т.д. Заголовки секций и
заголовки сегментов объединены в таблицы. А заголовок эльфа указывает,
гдеискать эти таблицы в файле, каков размер одного заголовка/секции, точку
входа и т.д.

Для более детального понимния рекомендую ццикл статей тут
https://blog.k3170makan.com/2018/09/introduction-to-elf-format-elf-header.html
или ман по формату эльфа.

В качестве языка реализации был выбран ~GAS asm~, поскольку это позволяло
собрать вирус без библиотек, что значительно упрощало заражение. В
качестве файла жертвы был динамически слинкованный сишный ~Hello world~.

Идея заражения, описанная у Касперски проста: находим первый загружаемый
сегмент кода - мы ж хотим, чтоб код вируса оказался в
памяти процесса - находим в нем последнюю секцию и пишем вирус сразу
после нее. Затем расширяем и секцию, и сегмент на размер вируса, путем
редактирования их заголовков, редактируем заголовки всех сегментов и секций,
которые описыают код, лежащий ниже зараженной секции, увеличивая
виртуальные адреса и смещение в файле на размер вируса и изменяем точку
входа в заголовке эльфа, чтоб программа стартовала с выполнения вируса.
Передача управления на жертву решалась пятью байтами машинного кода,
который я вставлял после вируса: ~e9~ - машкод относительного ~jmp~, и
смещением от следующей инструкции до оригинальной точки входа.

В качестве результата я получил сегфолт еще до того, как управление
перешло на точку входа - т.е. что-то случилось на этапе загрузки и
линковки.

Программа загружается лоадером в память процесса, а затем вызывается
линкер - в моем случае это ~ld-linux-x86-64.so.2~, который должен связать
все подключенные библиотеки друг с другом, положить адрес на себя в одну
из записей таблицы ~GOT~ - иначе как мы его вызовем, когда встретим в
программе какой-нибудь ~printf~. Всю информацию линкер берет из секции
~dynamic~, именно она описывает, где искать ~GOT~, какие именно либы надо
подгрузить и т.д. Когда я вставил вирус, все сместилось,
разумеется. А вот ~dynamic~ продолжала описывать незараженную версию
программы.

Ладно, исправили, изменив виртуальные адреса в каждой записи секции
~dynamic~. Заодно мимоходом выяснили, что надо отредактировать
виртуальные адреса в записях секциий ~rela~ - они описывают, как именно линкер
должен разрешить каждый релокейт - и виртуальные адреса в таблице
символов ~symtab~, где каждая запись описывает, где объевлен символ
программы.

Ура, все заработало... нет.
Вирус запустился, даже передал управление на жертву. Жертва доходит до
раздела ~PLT~, прыжок и... вместо записи в ~GOT~ мы попадаем туда, где
эта запись ~была~ до заражения. Проблема заключается в том, что раздел
~PLT~ находится до первого загружаемого сегмента кода жертвы, а вот
раздел ~GOT~ - после. Расширив сегмент вирусом, мы нарушили соотношение
между ~PLT~ и ~GOT~, так что даже относительные джампы из ~PLT~ в ~GOT~
никак не могли исправить положение.

Можно, конечно, отредактировать смещения в джампах, но это тяжко: надо
научиться определять, где какой переход, не попасть между инструкций и
т.д. Так что я решил зайти с другого конца, в прямом смысле слова.

Сделаем все то же самое, но вирус поместим после всего кода жертвы,
вместо заголовков секций, а их сдвинем.
Минус этого подхода по сравнению с предыдущим состоит в том, что виирус
прихожится оформлять в отдельный сегмент кода, а не присоединять к уже
существующему, что предполагает создание его заголовка сегмента и
заголовка секции. Поскольку заголовок сегмента вставляется в таблицу
сегментов, то весь код жертвы съедет вниз равномерно на 56 байт - размер
заголовка сегмента на моей архитектуре - в результате чего
все заработает, как я полагал.

Вот после запуска новой версии вируса мы с вами и встретились в начале
этой статьи.

Вооружившись сорцами ~libc~, отладчиком ~gdb~ и вот этой статьей
http://blog.k3170makan.com/2018/10/introduction-to-elf-format-part-v.html,
я полез "под капот".

Только на этом этапе стало видно, какую подлянку мне устроила моя версия
компилятора ~gcc~, который компилил мою жертву. Он генерировал
позиционно-зависимый код. В результате этого ~libc~ получала неверные
параметры и дальше наступало "крушение всех надежд, пять букв".
Напрашивающийся очеивдный вариант - урегулирование всех ссылок. Но это куда хуже,
чем немного подредактировать ~PLT~, от чего мы отказались пару абзацев назад.

Так что немного поломав голову я решил сдвинуть жертву в памяти процесса
до того, как вирус передаст на нее управление, чтоб жертва оказалась на
своих прежних адресах, как будто ничего не было.

Вот так выглядит инфицированный файл в памяти процесса до заражения

#+NAME: infected_victim_without_bind_now_before_move
#+BEGIN_SRC ditaa :file ./img/infected_victim_without_bind_now_before_move.png
  +------------------+-----------------------------------------------------+
  | 0x400000         |             ЗAГОЛОВОК ELF-ФАЙЛА                     |
  |                  |                ...............                      |
  +------------------+-----------------------------------------------------+ <--- ТАБЛИЦА ЗАГОЛОВКОВ СЕГМЕНТОВ
  | 0x400040         |     PHRD - ЗАГОЛОВОК ТАБЛИЦЫ СЕГМЕНТОВ              |
  +------------------+-----------------------------------------------------+
  | 0x400078         |             INTERP - ЗАГОЛОВОК                      |
  +------------------+-----------------------------------------------------+
  | 0x4000b0         |  LOAD - ЗАГОЛОВОК ЗАГРУЖАЕМОГО СЕГМЕНТА ЖЕРТВЫ      |
  +------------------+-----------------------------------------------------+
  | 0x4000e8         |      DYNAMIC - ЗАГОЛОВОК СЕГМЕНТА DYNAMIC           |
  |                  |                  .......                            |
  |                  |                  .......                            |
  +------------------+-----------------------------------------------------+
  | 0x400190         |                  cRED                               |
  |                  |  LOAD - ЗАГРУЖАЕМЫЙ ЗАГОЛОВОК СЕГМЕНТА ВИРУСА       |
  +------------------+-----------------------------------------------------+ <--- НАЧАЛО КОДА ЖЕРТВЫ
  | 0x4001c8         |                 КОД ЖЕРТВЫ                          |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- CЮДА ВИРУС ПЕРЕДАСТ УПРАВЛЕНИЕ
  | 0x400468         |           ОРИГИНАЛЬНЫЙ _START ЖЕРТВЫ                |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- ОТСЮДА НАЧНЕТСЯ ИСПОЛНЕНИЕ ПРОГРАММЫ
  |                  |                  cRED                               |
  | 0x80128a         |               _START ВИРУСА                         |
  |                  |                  ......                             |
  |                  |                  ......                             |
  +------------------+-----------------------------------------------------+ <---- КОНЕЦ ФАЙЛА В ПАМЯТИ
#+END_SRC

А вот так будет выглядеть после:

#+NAME: victim_after_move_pic
#+BEGIN_SRC ditaa :file ./img/infected_victim_after_move.png
  +------------------+-----------------------------------------------------+ <--- ЗАГОЛОВОК ELF-ФАЙЛА ОСТАЕТСЯ НА МЕСТЕ
  | 0x400000         |             ЗAГОЛОВОК ELF-ФАЙЛА                     |
  |                  |                ...............                      |
  +------------------+-----------------------------------------------------+ <--- ТАБЛИЦА ЗАГОЛОВКОВ ОСТАЕТСЯ НА МЕСТЕ
  | 0x400040         |     PHRD - ЗАГОЛОВОК ТАБЛИЦЫ СЕГМЕНТОВ              |
  +------------------+-----------------------------------------------------+
  | 0x400078         |             INTERP - ЗАГОЛОВОК                      |
  +------------------+-----------------------------------------------------+
  | 0x4000b0         |  LOAD - ЗАГОЛОВОК ЗАГРУЖАЕМОГО СЕГМЕНТА ЖЕРТВЫ      |
  +------------------+-----------------------------------------------------+
  | 0x4000e8         |      DYNAMIC - ЗАГОЛОВОК СЕГМЕНТА DYNAMIC           |
  |                  |                  .......                            |
  |                  |                  .......                            |
  +------------------+-----------------------------------------------------+ <--- ЗАГОЛОВОК ВИРУСА ОКАЗАЛСЯ ЗАТЕРТ
  |                  |                   cBLU                              |
  | 0x400190         |                 КОД ЖЕРТВЫ                          |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- ОРИГИНАЛЬНАЯ ТОЧКА ВХОДА СМЕСТИЛАСЬ
  |                  |                    cBLU                             |       НА 56 БАЙТ
  | 0x400430         |           ОРИГИНАЛЬНЫЙ _START ЖЕРТВЫ                |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- СЕГМЕНТ ВИРУСА СМЕСТИЛСЯ НА 56 БАЙТ
  |                  |                  cBLU                               |
  | 0x801242         |               _START ВИРУСА                         |
  |                  |                  ......                             |
  |                  |                  ......                             |
  +------------------+-----------------------------------------------------+ <---- КОНЕЦ ФАЙЛА В ПАМЯТИ
#+END_SRC

Вас еще ничего не смутило в этом плане?
"Сдвиг" жертвы предполагает запись прямо в код, что по умолчанию
заканчивается сегфолтом. Но если замечательный системный вызов
~mprotect~, который позволяет менять атрибуты страницы памяти, задавая
новые. Так что если правильно если правильно реализовать и вызвать ~mprotect~
для кода жертвы, то мы можем разрешить запись.
Так что запись в код - это вообще не главная проблема. "Биг босс" ждет
впереди :)

Поскольку мы помним, что линкер использует секцию ~dynamic~, а у нас в
файле используется ленивое связывание, то позаботимся, чтоб до "сдвига"
жертвы мы отредактировали записи в секции ~dynamic~ "обратно", вернув им
прежние адреса.

Файл запустился, вирус отработал, подвинул жертву,  передал ей управление
и... попытка слинковать ~libc~ в рантайме и затем вызвать завершается
сегфолтом. Маленький зверек с белой шубкой подкрался незаметно.

Мы недооценили, насколько линкер хитрая штуковина. Он знает, что скорее
всего его вызовут еще n раз, а еще знает, что скорее всего будет вызвана
~libc~, которой нужен доступ к некоторым секциям жертвы, вроже секций
~fini~ или ~init~, информация о которых хранится в любимой нами секции
~dynamic~. Но вот обращаться напрямую к записям ~dynamic~ повторно линкер
не хочет, да и ~libc~ это незачем. Так что линкер до того как передать
управление программе создает в памяти буфер и сохраняет адреса необходимых
ему и ~libc~ записей ~dynamic~ - т.е. где эти записи расположены в памяти
процесса. А затем, когда уже есть необходимость, ~libc~ и линкер
обращаются к конкретным записям, выуживая из них нужную информацию.

В резльутате мы получаем потрясающую ситуацию: не сдвигать код жертвы мы
не можем, потому что у нас позиционно-зависимый код, а сдвиг приводит к
тому, что адресе записей секции ~dynamic~ в буфере становятся
неактуальными и ~libc~ получает доступ к совсем не той информации, на
которую рассчитывает. И отредактировать эти адреса нет никакой возможности: они
не расположены в буфере один за другим, мы не знаем, сколько их и т.д.

Выход есть: отказ от "ленивого" связывания. Линкер умеет связывать все
здесь и сейчас и делает это он в случае, если обнаруживает в секции ~dynamic~
запись ~BIND_NOW~. Так что нам надо всего-то вставить дполнительные 16
байт в секцию ~dynamic~, и это решит наши проблемы.

Теперь наш инфицированный файл до сдвига кода жертвы будет выглядеть вот
так.

#+NAME: victim_before_move_pic
#+BEGIN_SRC ditaa :file ./img/infected_victim_before_move.png
  +------------------+-----------------------------------------------------+
  | 0x400000         |             ЗAГОЛОВОК ELF-ФАЙЛА                     |
  |                  |                ...............                      |
  +------------------+-----------------------------------------------------+ <--- ТАБЛИЦА ЗАГОЛОВКОВ СЕГМЕНТОВ
  | 0x400040         |     PHRD - ЗАГОЛОВОК ТАБЛИЦЫ СЕГМЕНТОВ              |
  +------------------+-----------------------------------------------------+
  | 0x400078         |             INTERP - ЗАГОЛОВОК                      |
  +------------------+-----------------------------------------------------+
  | 0x4000b0         |  LOAD - ЗАГОЛОВОК ЗАГРУЖАЕМОГО СЕГМЕНТА ЖЕРТВЫ      |
  +------------------+-----------------------------------------------------+
  | 0x4000e8         |      DYNAMIC - ЗАГОЛОВОК СЕГМЕНТА DYNAMIC           |
  |                  |                  .......                            |
  |                  |                  .......                            |
  +------------------+-----------------------------------------------------+
  | 0x400190         |                  cRED                               |
  |                  |  LOAD - ЗАГРУЖАЕМЫЙ ЗАГОЛОВОК СЕГМЕНТА ВИРУСА       |
  +------------------+-----------------------------------------------------+ <--- НАЧАЛО КОДА ЖЕРТВЫ
  | 0x4001c8         |                 КОД ЖЕРТВЫ                          |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- CЮДА ВИРУС ПЕРЕДАСТ УПРАВЛЕНИЕ
  | 0x400468         |           ОРИГИНАЛЬНЫЙ _START ЖЕРТВЫ                |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- СЕКЦИЯ DYNAMIC
  | 0x600e48         |    NEEDED - ПЕРВАЯ ЗАПИСЬ СЕКЦИИ DYNAMIC            |
  +------------------+-----------------------------------------------------+
  | 0x600e58         |                 ЗАПИСЬ INIT                         |
  +------------------+-----------------------------------------------------+
  | 0x600e68         |                 ЗАПИСЬ FINI                         |
  |                  |                  ........                           |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+
  |                  |                  cRED                               |
  | 0x600ee8         |       BIND_NOW - ВСТАВЛЕННАЯ НАМИ ЗАПИСЬ            |
  +------------------+-----------------------------------------------------+
  | 0x600ef8         |      NULL - ПОСЛЕДНЯЯ ЗАПИСЬ СЕКЦИИ DYNAMIC         |
  +------------------+-----------------------------------------------------+ <---- ОСТАВШИЙСЯ КОД ЖЕРТВЫ
  | 0x600f08         |               ПРОЧИЙ КОД ЖЕРТВЫ                     |
  |                  |                  ......                             |
  |                  |                  ......                             |
  +------------------+-----------------------------------------------------+ <---- ОТСЮДА НАЧНЕТСЯ ИСПОЛНЕНИЕ ПРОГРАММЫ
  |                  |                  cRED                               |
  | 0x80128a         |               _START ВИРУСА                         |
  |                  |                  ......                             |
  |                  |                  ......                             |
  +------------------+-----------------------------------------------------+ <---- КОНЕЦ ФАЙЛА В ПАМЯТИ
#+END_SRC

Надо только немного модифицировать подвижку жертвы таким образом, что мы
затерли запись ~BIND_NOW~, иначе все, что находилось ниже секции
~dynamic~, окажется не на своих адресах.

Запускаем инфицированный файл и... видим строчку ~HELLO WORLD~ на экране! Ура, это...

В смысле сегфолт?!

Снова забираемся "под капот" с помощью ~gdb~ и видим, как ~libc~ пытается
завершить корректно сишную жертву. И даже несмотря на "связывание здесь и
сейчас" ~libc~ обращается к буферу, который создал линкер, и берет оттуда
адреса записей ~fini~ и других в секции ~dynamic~, которую мы
подвинули. И вот на этот процесс у нас нет позможности повлиять, кроме
как... не двигать ~dynamic~ вообще.

На наше счастье все записи, необходимые ~libc~ для корректного завершения
программы, находятся в начале секции ~dynamic~. Это значит, что мы вполне
можем оставить ее на месте, но подвинуть весь код, расположенный за ней,
затерев ее нижние 72 байта - размер заголовка сегмента вируса и записи
~BIND_NOW~.

Таким образом после "сдвига" инфицированный файл будет выглядеть вот так:

#+NAME: victim_after_move_pic
#+BEGIN_SRC ditaa :file ./img/infected_victim_after_move.png
  +------------------+-----------------------------------------------------+ <--- ЗАГОЛОВОК ELF-ФАЙЛА ОСТАЕТСЯ НА МЕСТЕ
  | 0x400000         |             ЗAГОЛОВОК ELF-ФАЙЛА                     |
  |                  |                ...............                      |
  +------------------+-----------------------------------------------------+ <--- ТАБЛИЦА ЗАГОЛОВКОВ ОСТАЕТСЯ НА МЕСТЕ
  | 0x400040         |     PHRD - ЗАГОЛОВОК ТАБЛИЦЫ СЕГМЕНТОВ              |
  +------------------+-----------------------------------------------------+
  | 0x400078         |             INTERP - ЗАГОЛОВОК                      |
  +------------------+-----------------------------------------------------+
  | 0x4000b0         |  LOAD - ЗАГОЛОВОК ЗАГРУЖАЕМОГО СЕГМЕНТА ЖЕРТВЫ      |
  +------------------+-----------------------------------------------------+
  | 0x4000e8         |      DYNAMIC - ЗАГОЛОВОК СЕГМЕНТА DYNAMIC           |
  |                  |                  .......                            |
  |                  |                  .......                            |
  +------------------+-----------------------------------------------------+ <--- ЗАГОЛОВОК ВИРУСА ОКАЗАЛСЯ ЗАТЕРТ
  |                  |                   cBLU                              |
  | 0x400190         |                 КОД ЖЕРТВЫ                          |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- ОРИГИНАЛЬНАЯ ТОЧКА ВХОДА СМЕСТИЛАСЬ
  |                  |                    cBLU                             |       НА 56 БАЙТ
  | 0x400430         |           ОРИГИНАЛЬНЫЙ _START ЖЕРТВЫ                |
  |                  |                  .......                            |
  |                  |                  .......                            |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- СЕКЦИЯ DYNAMIC ОСТАЛАСЬ НА МЕСТЕ
  | 0x600e48         |    NEEDED - ПЕРВАЯ ЗАПИСЬ СЕКЦИИ DYNAMIC            |
  +------------------+-----------------------------------------------------+
  | 0x600e58         |                 ЗАПИСЬ INIT                         |
  +------------------+-----------------------------------------------------+
  | 0x600e68         |                 ЗАПИСЬ FINI                         |
  |                  |                  ........                           |
  |                  |                                                     |
  +------------------+-----------------------------------------------------+ <---- ЗАТЕРЛИ 72 БАЙТА СЕКЦИИ DYNAMIC,
  |                  |                    cBLU                             |       ВКЛЮЧАЯ ЗАПИСЬ BIND_NOW
  | 0x600ec0         |               ПРОЧИЙ КОД ЖЕРТВЫ                     |
  |                  |                  ......                             |
  |                  |                  ......                             |
  +------------------+-----------------------------------------------------+ <---- СЕГМЕНТ ВИРУСА СМЕСТИЛСЯ НА 72 БАЙТА
  |                  |                  cBLU                               |
  | 0x801242         |               _START ВИРУСА                         |
  |                  |                  ......                             |
  |                  |                  ......                             |
  +------------------+-----------------------------------------------------+ <---- КОНЕЦ ФАЙЛА В ПАМЯТИ
#+END_SRC

Итого мы получили вирус, который может заражать файлы как с
позиционно-независимым, так и с позиционно-зависимым кодом.

Ссылка на проект на гите
(тут будет ссылка)
